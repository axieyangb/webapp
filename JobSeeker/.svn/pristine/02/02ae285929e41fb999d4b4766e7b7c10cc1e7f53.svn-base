import { OrderPipe } from './../common/orderPipeComponent';

import { JobService } from './../job/jobservice';
import { Job } from './../job/job';
import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute, Params } from '@angular/router';

const enum OrderType {
    Relevance = 0,
    Date = 1
}

@Component({
    moduleId: module.id,
    selector: 'job-list',
    templateUrl: 'jobListComponent.html',
    styleUrls: ['jobListComponent.css'],
    pipes: [OrderPipe]
})

export class JobListComponent implements OnInit {
    jobs: Job[];
    oneJob: Job;
    keywords: string;
    listValid: boolean;
    orderType: OrderType = OrderType.Relevance;
    orderString: string = '';
    field: string = 'createdate';
    constructor(private jobservice: JobService, private route: ActivatedRoute, private router: Router) {
        this.listValid = true;
        this.keywords = "";
        this.jobs = [];
        this.oneJob = new Job();
    }
    ngOnInit() {
        this.route.params.map(a => a["keywords"]).subscribe(a => { this.keywords = a });
        if (this.keywords != null)
            this.searchJobs();
    }

    getAllJobs(): void {
        this.jobservice.getAllJobs().subscribe(jobs => this.jobs = jobs);
    }
    searchJobs(): void {
        this.router.navigate(['/list', { 'keywords': this.keywords }]);
        if (this.keywords != "") {
            this.listValid = false;
            this.jobservice.searchJobs(this.keywords).subscribe(jobs => { this.jobs = jobs; this.listValid = true });
        }
    }
    showMoreDescription(targetJob: Job): void {
        this.jobservice.getJobById(targetJob.Id).subscribe(oneJob => { targetJob.JobDescription = oneJob.JobDescription; });
        targetJob.IsFullDescriptionShow = true;
    }
    hideMoreDescription(targetJob: Job): void {
        targetJob.JobDescription = (targetJob.JobDescription.length > 100 ? targetJob.JobDescription.substring(0, 100) + "..." : targetJob.JobDescription);
        targetJob.IsFullDescriptionShow = false;
    }
    highlightKeywords(content: string) {
        content = content.replace(/</g, "").replace(/>/g, "").replace(/\//g, "").replace(/<mark>/g, "").replace(/<\/mark>/g, "");
        let splits: string[] = this.keywords.split(' ');
        for (var index = 0; index < splits.length; index++) {
            let keyItem = splits[index];
            if (keyItem.length > 0) {
                let regex = new RegExp(keyItem, "g");
                content = content.replace(regex, "<mark>" + keyItem + "</mark>");
            }
        }
        return content;
    }
    OrderByDate() {
        this.orderString = 'createdate desc';
        this.orderType = OrderType.Date;
        
    }
    OrderByRelevent():void {
        this.orderString = '';
        this.searchJobs();
        this.orderType = OrderType.Relevance;

    }
    isNewPosted(dateStr: string):boolean {
        let todayStr: string = new Date().toJSON().toString();
        return dateStr.substring(0,10)==todayStr.substring(0,10);
    }
}